# Setting up the Provider and Region
provider "aws" { 
  region = "eu-west-3" 
} 

# Data to expose all availability_zones.
data "aws_availability_zones" "all" {}

# Creates the Launch Configuration
resource "aws_launch_configuration" "example" {
  image_id = "ami-40d28157"
  instance_type = "${var.instance_type}"
  security_groups = ["${aws_security_group.instance.id}"] 
  user_data = "${data.template_file.user_data.rendered}"
  
  #user_data = <<-EOF 
  #          #!/bin/bash 
  #          echo "Hello, World" > index.html
  #          nohup busybox httpd -f -p "${var.server_port}" &
  #          EOF
  lifecycle { 
   create_before_destroy = true 
  } 
} 

# Create SG to the instance. 
resource "aws_security_group" "instance" { 
  name = "${var.cluster_name}-instance" 
  ingress {
    from_port = "${var.server_port}" 
    to_port = "${var.server_port}" 
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"] 
  } 
  lifecycle { 
     create_before_destroy = true 
  }
}

# SG to ELB
resource "aws_security_group" "elb" { 
  name = "${var.cluster_name}-elb" 
  ingress { 
    from_port = 80
    to_port = 80
    protocol = "tcp" 
    cidr_blocks = ["0.0.0.0/0"] 
  } 
}

# Creates the auto scaling group-ASG resource.
resource "aws_autoscaling_group" "example" {
  launch_configuration = "${aws_launch_configuration.example.id}"
  availability_zones = ["${data.aws_availability_zones.all.names}"]
  load_balancers = ["${aws_elb.example.name}"]
  health_check_type = "ELB"
  
  min_size = "${var.min_size}"
  max_size = "${var.max_size}"
 
  tag {
    key = "Name"
    value = "terraform-asg-example" 
    propagate_at_launch = true
  }
}

# Adding ELB to Balance Traffic.
resource "aws_elb" "example" {
  name = "${var.cluster_name}-elb" 
  availability_zones = ["${data.aws_availability_zones.all.names}"]
  security_groups = ["${aws_security_group.elb.id}"]
  
  listener {
    lb_port = 80
    lb_protocol = "http"
    instance_port = "${var.server_port}" 
    instance_protocol = "http" 
  }
  
  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    interval = 30
    target = "HTTP:${var.server_port}/"
  }
}

# Setting up variables to HTTP ports 
variable "server_port" {
  description = "The port the server will use for HTTP requests"
  default = 8080
} 

# Just showing Public IPs
#output "public_ip" {
#  value = "${aws_instance.example.public_ip}"
#}
# Show public IP from ELB
output "elb_dns_name" {
  value = "${aws_elb.example.dns_name}"
} 
